package predictive;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collection;

import wordTree.MainNode;

public class DictionaryTreeImpl implements Dictionary {
	
	private MainNode tree;
	
	public DictionaryTreeImpl(){
		
		tree = new MainNode();
		BufferedReader ourFile = openFile();
		readWords(ourFile);	
	}

	@Override
	public String wordToSignature(String word) {
		
		word = word.toLowerCase();

		StringBuffer numString = new StringBuffer();

		for (int i = 0; i < word.length(); i++) {
			Integer c = ValueMaps.getLetterToNum().get(word.charAt(i));
			if (c == null) {
				numString.append(' ');
			} else {
				numString.append(c);
			}
		}
		return numString.toString();
	}

	@Override
	public Collection<String> signatureToWords(String signature) {
		return tree.getWordsFromSig(signature);
	}
	
	private BufferedReader openFile() {

		BufferedReader tempBR = null;

		try {
			tempBR = new BufferedReader(new FileReader(
					Dictionary.dictionaryPath));
		} catch (FileNotFoundException e) {
			System.out.println("Could not find file to open.");
			e.printStackTrace();
			System.exit(1);
		}

		return tempBR;
	}

	private void readWords(BufferedReader ourFile) {
		
		try {

			for (String word = ourFile.readLine(); word != null; word = ourFile.readLine()) {

				if (isValidWord(word)) {
					word = word.toLowerCase();
					//temp.add(word);
					tree.insertWord(word);				
				}
			}
			
		} catch (IOException e) {
			System.out.println("An error occured when copying: "
					+ e.getMessage());
		} finally {
			try {
				ourFile.close();
			} catch (IOException e) {
				System.out.println("An error occured when closing the file: "
						+ e.getMessage());
			}
		} 
	}

	private boolean isValidWord(String word) {
		char[] charArray = word.toCharArray();
		for (char c : charArray) {
			if (!Character.isLetter(c)) {
				return false;
			}
		}
		return true;
	}

	
	
}

package predictive;

/**
 * Contains a word and its signature, can be sorted based on signature
 * 
 * @author Joe
 * 
 */
public class WordSig implements Comparable<WordSig> {

	private String signature;
	private String word;

	/**
	 * Created the object with a given signature and word
	 * 
	 * @param signature
	 *            The signature
	 * @param word
	 *            The word
	 */
	public WordSig(String signature, String word) {
		this.signature = signature;
		this.word = word;
	}

	/**
	 * A compare to method for comparing word sigs, follows standard compareTo
	 * conventions. Only sorts based on the signature, does not look at the word
	 */
	@Override
	public int compareTo(WordSig o) {

		if (this.getSignature().length() == o.getSignature().length()) {
			for (int i = 0; i < this.getSignature().length(); i++) {
				if (this.getSignature().charAt(i) > o.getSignature().charAt(i)) {
					return 1;
				} else if (this.getSignature().charAt(i) < o.getSignature().charAt(i)) {
					return -1;
				}
			}
		} else {
			return (this.getSignature().length() - o.getSignature().length());
		}
		return 0;
	}

	/**
	 * Gets the signature of this object
	 * @return The signature
	 */
	public String getSignature() {
		return signature;
	}

	/**
	 * Gets the word of this object
	 * @return The word
	 */
	public String getWord() {
		return word;
	}

	/**
	 * A to string method, combines the signature and word into a useful string for printing
	 */
	public String toString() {
		return "Signature: " + signature + "   Word: " + word;
	}

}
